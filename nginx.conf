events {
    use epoll;
    worker_connections 1024;
}

http {
    upstream write_api {
        least_conn;
        server unix:/tmp/write_api.sock;
        keepalive 32;
    }

    upstream read_api {
        least_conn;
        server unix:/tmp/read_api.sock;
        keepalive 32;
    }

    server {
        listen 80;
        
        location = /payments {
            if ($request_method != POST) {
                return 405;
            }
            
            content_by_lua_block {
                ngx.req.read_body()
                local body = ngx.req.get_body_data()
                
                ngx.status = 200
                ngx.eof()
                
                local function send_to_write_api(premature)
                    if premature then return end
                    
                    local socket = ngx.socket.tcp()
                    local ok = socket:connect("unix:/tmp/write_api.sock")
                    if not ok then return end
                    
                    local request = "POST /payments HTTP/1.1\r\nHost: localhost\r\nContent-Type: application/json\r\nContent-Length: " .. #body .. "\r\nConnection: close\r\n\r\n" .. body
                    
                    socket:send(request)
                    socket:close()
                end
                
                ngx.timer.at(0, send_to_write_api)
            }
        }

        location ~ ^/(admin/purge|purge-payments) {
            proxy_pass http://write_api;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
        }

        location /payments-summary {
            proxy_pass http://read_api/payments-summary;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
        }

        location / {
            proxy_pass http://read_api;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
        }
    }
}