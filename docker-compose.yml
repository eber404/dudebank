services:
  api1: &api-service
    build:
      context: .
      target: ${BUILD_TARGET:-production}
    env_file:
      - .env
    environment:
      - BUN_ENV=development
      - BUILD_TARGET=development
      - DEBUG=true
    networks:
      - backend
      - payment-processor
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    deploy:
      resources:
        limits:
          cpus: "0.4"
          memory: "180MB"

  api2:
    <<: *api-service

  nginx:
    image: nginx:alpine
    env_file:
      - .env
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - api1
      - api2
    networks:
      - backend
    deploy:
      resources:
        limits:
          cpus: "0.1"
          memory: "15MB"

  postgres:
    image: postgres:alpine
    env_file:
      - .env
    environment:
      - POSTGRES_DB=rinha_dev
      - POSTGRES_USER=dev
      - POSTGRES_PASSWORD=dev123
    volumes:
      - ./sql/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
      # - ./sql/seed.sql:/docker-entrypoint-initdb.d/seed.sql:ro
      # - postgres_data:/var/lib/postgresql/data
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U dev -d rinha_dev"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: "0.3"
          memory: "150MB"

  redis:
    image: redis:alpine
    command: redis-server --maxmemory 125mb --maxmemory-policy allkeys-lru
    env_file:
      - .env
    networks:
      - backend
    deploy:
      resources:
        limits:
          cpus: "0.3"
          memory: "125MB"

networks:
  backend:
    driver: bridge
  payment-processor:
    external: true

volumes:
  postgres_data:
